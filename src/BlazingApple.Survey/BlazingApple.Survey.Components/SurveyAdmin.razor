@using BlazingApple.Survey.Components.Internal.Questions
@using BlazingApple.Survey.Components.Services
@using BlazingApple.Components
@strError
@if (_surveys != null)
{
	<div>
		@if (!ExistingSurveys.HasValue)
		{
			@if (LoadingContent is not null)
			{
				@LoadingContent
			}
			else {

				<Loading/>
			}
		}
		else
		{
			if (ExistingSurveys == true)
			{
				@foreach(Shared.Survey survey in _surveys)
				{
					<Card Title="@survey.Name">
						<HeaderContent>
							<div>
								@if (SurveyHeaderContent is not null)
								{
									@SurveyHeaderContent(survey)
								}
								<button title="Edit survey" type="button" class="btn btn-link px-1" @onclick="OnEditSurveyClick" disabled="@_isEditing">
									<Icon I="BlazingApple.Components.Services.IconType.Edit" />
								</button>
								<button title="Delete survey" type="button" class="btn btn-link px-1" @onclick="(async () => await DeleteSurveyDialog(survey))" disabled="@_isEditing">
									<Icon I="BlazingApple.Components.Services.IconType.Delete" />
								</button>
							</div>
						</HeaderContent>
						<ChildContent>
							@if (SurveyBodyContent is not null)
							{
								@SurveyBodyContent(survey)
							}

							@if(_isEditing) {
								<EditSurveyInline @bind-Value="_isEditing" AdditionalSegments="@AdditionalSegments" SelectedSurvey="survey" OnClose="RefreshSurveys"></EditSurveyInline>
							}

							<div class="row">
								<div class="col-md-12">
									<QuestionsAdmin SelectedSurvey="@survey"></QuestionsAdmin>
								</div>
							</div>
						</ChildContent>
					</Card>
				}
			}
		}

		@if (!_isCreatingNewSurvey) 
		{
			<div class="d-flex justify-content-center">
				<button class="btn btn-primary me-2" title="New Survey" @onclick="OnNewSurveyClick">
					<i class="fas fa-poll"></i> @NewSurveyLabel
				</button>
			</div>
		}

		@if (_isCreatingNewSurvey && _newSurvey is not null)
		{
			<EditSurveyInline SelectedSurvey="_newSurvey" AdditionalSegments="@AdditionalSegments" @bind-Value="_isCreatingNewSurvey" OnClose="RefreshSurveys"></EditSurveyInline>
		}
	</div>

}

@code {
	async Task DeleteSurveyDialog(Shared.Survey survey)
	{
		await DialogService.OpenAsync("Delete Survey", ds =>
	@<div>
		<p class="mb-2">Are you sure you want to delete this survey? This action cannot be undone.</p>
		<div class="row">
			<div class="col-md-12">
				<button type="button" @onclick="(async () => await Delete(survey))" class="btn btn-outline-danger mb-1">Yes, delete</button>
				<button type="button" @onclick="() => ds.Close(false)" class="btn btn-secondary mb-1">Cancel</button>
			</div>
		</div>
	</div>);
	}
}
