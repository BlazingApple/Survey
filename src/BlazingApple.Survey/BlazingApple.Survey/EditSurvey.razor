@using System.Linq;
@inject Radzen.DialogService dialogService
@inherits OwningComponentBase<SurveyService>

@strError

<RadzenCard Style="margin: .1rem; margin-bottom: 20px;">
	<div class="row">
		<div class="col-md-12">
			<div>
				<RadzenLabel Component="surveyName" Text="Survey Name"></RadzenLabel>
			</div>
			<RadzenTextBox id="surveyName" @bind-Value="SelectedSurvey.SurveyName" Style="width: 400px;" />
			<br />
		</div>
	</div>
</RadzenCard>
<div class="d-flex" style="flex-direction:row;">
	<RadzenButton Click="UpdateSurvey"
				  Text="Save" ButtonStyle="ButtonStyle.Success"
				  Style="margin-bottom: 10px; width: 150px; margin-right:.25rem;" />
	<RadzenButton Click="Cancel"
				  ButtonStyle="ButtonStyle.Light"
				  Text="Close"
				  Style="margin-bottom: 10px; margin-left:.25rem; width: 150px; margin-right:.25rem;" />
	@if (SelectedSurvey.Id > 0)
	{
		<RadzenButton Click="DeleteSurveyDialog"
					  ButtonStyle="ButtonStyle.Danger"
					  Text="Delete"
					  Style="margin-bottom: 10px; width: 150px; margin-right:.25rem;" />
	}
</div>
@code {
	[Parameter]
	public Survey SelectedSurvey { get; set; }

	[Parameter]
	public EventHandler OnClose { get; set; }

	[Parameter]
	public bool PromptInline { get; set; }

	string strError = "";

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();
		if (SelectedSurvey == null)
		{
			SelectedSurvey = new Survey();
		}
	}

	async Task UpdateSurvey()
	{
		try
		{
			if (SelectedSurvey.Id == 0)
			{
				SelectedSurvey = await @Service.CreateSurveyAsync(SelectedSurvey);
			}
			else
			{
				SelectedSurvey = await @Service.UpdateSurveyAsync(SelectedSurvey);
			}

			dialogService.Close(SelectedSurvey);
			InvokeOnClose();
		}
		catch (Exception ex)
		{
			strError = ex.GetBaseException().Message;
		}
	}

	async Task DeleteSurveyDialog() {
		if(PromptInline)
		{
			await DeleteSurvey();
		}
		else
		{
			await dialogService.OpenAsync("Delete Survey", ds =>
			@<RadzenCard Style="padding: 20px;">
				<p Style="margin-bottom: 10px;">Confirm?</p>
				<div class="row">
					<div class="col-md-12">
						<RadzenButton Text="Yes" Click="DeleteSurvey"
									  Style="margin-bottom: 10px; width: 150px" />
						<RadzenButton Text="No" Click="() => ds.Close(false)"
									  ButtonStyle="ButtonStyle.Secondary"
									  Style="margin-bottom: 10px; width: 150px" />
					</div>
				</div>
			</RadzenCard>);
		}
	}

	async Task DeleteSurvey()
	{
		var result = await @Service.DeleteSurveyAsync(SelectedSurvey);

		dialogService.Close(SelectedSurvey.Id);
		InvokeOnClose();
	}

	private void InvokeOnClose()
	{
		if (OnClose != null)
		{
			OnClose.Invoke(this, null);
		}
	}
	private void Cancel()
	{
		dialogService.Close();
		InvokeOnClose();
	}
}
