@using System.Linq;
@inject Radzen.DialogService dialogService
@inherits OwningComponentBase<SurveyService>

@strError
<EditForm Model="SelectedSurvey">
	<RadzenCard Style="margin: .1rem; margin-bottom: 20px;">
		<div class="row">
			<div class="col-md-12">
				<div class="form-group">
					<label for="surveyName">Survey Name</label>
				</div>
				<InputText id="surveyName" class="form-control" @bind-Value="SelectedSurvey.SurveyName"></InputText>
			</div>
		</div>
	</RadzenCard>
	<div class="d-flex" style="flex-direction:row;">
		<button class="btn btn-success mb-1 mr-1" @onclick="UpdateSurvey">Save</button>
		<button class="btn btn-light mb-1 mr-1" @onclick="Cancel">Close</button>

		@if (SelectedSurvey.Id > 0)
		{
			<button class="btn btn-danger mb-1" @onclick="DeleteSurveyDialog">Delete</button>
		}
	</div>
</EditForm>
@code {
	[Parameter]
	public Survey SelectedSurvey { get; set; }

	[Parameter]
	public EventHandler OnClose { get; set; }

	[Parameter]
	public bool PromptInline { get; set; }

	string strError = "";

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();
		if (SelectedSurvey == null)
		{
			SelectedSurvey = new Survey();
		}
	}

	async Task UpdateSurvey()
	{
		try
		{
			if (SelectedSurvey.Id == 0)
			{
				SelectedSurvey = await @Service.CreateSurveyAsync(SelectedSurvey);
			}
			else
			{
				SelectedSurvey = await @Service.UpdateSurveyAsync(SelectedSurvey);
			}

			dialogService.Close(SelectedSurvey);
			InvokeOnClose();
		}
		catch (Exception ex)
		{
			strError = ex.GetBaseException().Message;
		}
	}

	async Task DeleteSurveyDialog() {
		if(PromptInline)
		{
			await DeleteSurvey();
		}
		else
		{
			await dialogService.OpenAsync("Delete Survey", ds =>
			@<RadzenCard Style="padding: 20px;">
				<p class="mb-2">Confirm?</p>
				<div class="row">
					<div class="col-md-12">
						<button @onclick="DeleteSurvey" class="btn btn-primary mb-1">Yes</button>
						<button @onclick="() => ds.Close(false)" class="btn btn-secondary mb-1">No</button>
					</div>
				</div>
			</RadzenCard>);
		}
	}

	async Task DeleteSurvey()
	{
		var result = await @Service.DeleteSurveyAsync(SelectedSurvey);

		dialogService.Close(SelectedSurvey.Id);
		InvokeOnClose();
	}

	private void InvokeOnClose()
	{
		if (OnClose != null)
		{
			OnClose.Invoke(this, null);
		}
	}
	private void Cancel()
	{
		dialogService.Close();
		InvokeOnClose();
	}
}
