@inject SurveyService Service
@inject TooltipService tooltipService
@if (SelectedSurvey != null)
{
	<h4>
		Questions for @SelectedSurvey.SurveyName
	</h4>
	foreach (SurveyItem item in SelectedSurvey.SurveyItems.OrderBy(x => x.Position))
	{
		<div class="row">
			<div class="col-md-2">
				@if (item.Position > 0)
				{
					<RadzenButton ButtonStyle="ButtonStyle.Light"
								  Size="Radzen.ButtonSize.Medium"
								  Icon="arrow_circle_up"
								  Style="margin-top: 20px"
								  Click="@(args => SelectedSurveyMoveUp(item))" />
				}
				@if (item.Position < SelectedSurvey.SurveyItems.Count() - 1)
				{
					<RadzenButton ButtonStyle="ButtonStyle.Light"
								  Size="Radzen.ButtonSize.Medium"
								  Icon="arrow_circle_down"
								  Style="margin-top: 20px"
								  Click="@(args => SelectedSurveyMoveDown(item))" />
				}
			</div>
			<div class="col-md-10" style="text-align: left;margin-bottom: 20px">
				<SurveyItemDisplay item="@item" PromptInline="PromptInline"/>
			</div>
		</div>
	}
	<div class="row">
		<div class="col-md-12">
			@if (PromptInline && ShowNewQuestion)
			{
				<EditSurveyItem OnClose="CloseQuestionHandler" SelectedSurveyItem="@(new SurveyItem() { Id = 0, Survey = SelectedSurvey })"></EditSurveyItem>
			}
			@if (!ShowNewQuestion)
			{
				<button class="btn btn-primary mr-2" @onclick="@(args =>OpenQuestion())">Add Question</button>
			}
		</div>
	</div>
}
@code {
	[Parameter]
	public Survey SelectedSurvey { get; set; }

	[Parameter]
	public DialogService DialogService { get; set; }

	[Parameter]
	public bool PromptInline { get; set; }

	private bool ShowNewQuestion;
	private SurveyItem selectedSurveyItem;
	protected override void OnInitialized()
	{
		base.OnInitialized();
	}

	#region Move Questions
	private async Task SelectedSurveyMoveUp(object value)
	{
		SurveyItem objSurveyItem = (SurveyItem)value;
		int DesiredPosition = (objSurveyItem.Position - 1);

		// Move the current element in that position
		var CurrentSurveyItem = SelectedSurvey.SurveyItems.FirstOrDefault(x => x.Position == DesiredPosition);

		if (CurrentSurveyItem != null)
		{
			// Move it down
			CurrentSurveyItem.Position = CurrentSurveyItem.Position + 1;
			// Update it
			await Service.UpdateSurveyItemAsync(CurrentSurveyItem);
		}

		// Move Item Up
		SurveyItem SurveyItemToMoveUp = objSurveyItem;

		if (SurveyItemToMoveUp != null)
		{
			// Move it up
			SurveyItemToMoveUp.Position = SurveyItemToMoveUp.Position - 1;
			// Update it
			await Service.UpdateSurveyItemAsync(SurveyItemToMoveUp);
		}

		// Refresh SelectedSurvey
		SelectedSurvey = await @Service.GetSurvey(SelectedSurvey.Id);
	}

	private async Task SelectedSurveyMoveDown(object value)
	{
		SurveyItem objSurveyItem = (SurveyItem)value;
		int DesiredPosition = (objSurveyItem.Position + 1);

		// Move the current element in that position
		var CurrentSurveyItem = SelectedSurvey.SurveyItems.FirstOrDefault(x => x.Position == DesiredPosition);

		if (CurrentSurveyItem != null)
		{
			// Move it up
			CurrentSurveyItem.Position = CurrentSurveyItem.Position - 1;
			// Update it
			await Service.UpdateSurveyItemAsync(CurrentSurveyItem);
		}

		// Move Item Down
		SurveyItem SurveyItemToMoveDown = objSurveyItem;

		if (SurveyItemToMoveDown != null)
		{
			// Move it up
			SurveyItemToMoveDown.Position = SurveyItemToMoveDown.Position + 1;
			// Update it
			await Service.UpdateSurveyItemAsync(SurveyItemToMoveDown);
		}

		// Refresh SelectedSurvey
		await RefreshSurvey(SelectedSurvey.Id);
	}
	#endregion
	#region Helpers
	private async Task RefreshSurvey(int SurveyId)
	{
		SelectedSurvey = await @Service.GetSurvey(SurveyId);
	}

	void ShowTooltip(ElementReference elementReference, TooltipOptions options = null)
	{
		tooltipService.Open(elementReference, options.Text, options);
	}
	#endregion

	#region Open/Close
	private void OpenQuestion()
	{
		if(!PromptInline)
		{
			DialogService.Open<EditSurveyItem>($"New Question",
						new Dictionary<string, object>() { { "SelectedSurveyItem", new SurveyItem() { Id = 0, Survey = SelectedSurvey } } },
						new DialogOptions() { Width = "550px", Height = "380px" });
		}
		else {
			ShowNewQuestion = true;
		}
	}
	private void CloseQuestionHandler(object sender, EventArgs args)
	{
		CloseQuestion();
	}
	private void CloseQuestion()
	{
		ShowNewQuestion = false;
		StateHasChanged();
	}
	#endregion
}
