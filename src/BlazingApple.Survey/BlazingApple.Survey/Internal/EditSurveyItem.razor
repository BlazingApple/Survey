@using System.Linq;
@inject Radzen.DialogService dialogService
@inherits OwningComponentBase<SurveyService>
@strError
<EditForm Model="SelectedSurveyItem">
	<RadzenCard Style="margin: .1rem;">
		<div class="row">
			<div class="col-md-12">
				<div class="form-group">
					<label for="surveyText">Name</label>
					<InputText id="surveyText" class="form-control" @bind-Value="SelectedSurveyItem.ItemLabel" />
				</div>
			</div>
		</div>
		<br />
		<div class="row">
			<div class="col-md-6">
				<div class="form-group">
					<label for="itemType">Type</label>
					<InputSelect id="itemType" class="form-control" TValue="string" @bind-Value="SelectedSurveyItem.ItemType">
						@foreach (string itemType in FormTypes)
						{
							<option value="@itemType">@itemType</option>
						}
					</InputSelect>
				</div>
			</div>
			<div class="col-md-6">
				<div class="form-check">
					<input class="form-check-input" type="checkbox" @bind-value="@boolRequired" id="requiredCheck">
					<label class="form-check-label" for="requiredCheck">
						Required
					</label>
				</div>
			</div>
		</div>
		<div class="row">
			<div class="col-md-12">
				@if ((SelectedSurveyItem.ItemType == "Dropdown")
			  || (SelectedSurveyItem.ItemType == "Multi-Select Dropdown"))
				{
					<button class="btn btn-info btn-sm" @onclick="OpenPopup">Edit Options</button>
				}
			</div>
		</div>
	</RadzenCard>
	<button @onclick="UpdateSurveyItem" class="btn btn-success mb-2 mr-1">Save</button>
	<button @onclick="(()=>CloseSurveyItem())" class="btn btn-light mb-2 mr-1">Close</button>
	@if (SelectedSurveyItem.Id > 0)
	{
		<button @onclick="DeleteSurveyItemDialog" class="btn btn-danger mb-2 mr-1">Delete</button>
	}
	@if (ShowPopup)
	{
		<div class="modal" tabindex="-1" style="display:block;background-color:gainsboro" role="dialog">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h3 class="modal-title">Edit Responses</h3>
					</div>
					<div class="modal-body">
						<ul style="list-style-type:none;">
							@foreach (var option in SelectedSurveyItem.SurveyItemOptions.OrderBy(x => x.Id))
							{
								<li>
									<div style="margin-bottom: 10px; width: 150px">
										<button class="btn btn-danger btn-sm" @onclick="(() => RemoveOption(option))">
											<span aria-hidden="true">&times;</span>
										</button>
										<label>@option.OptionLabel</label>
									</div>
								</li>
							}
						</ul>
						<InputText class="form-control" @bind-Value="newOption" />
						<button @onclick="AddOption" class="btn btn-sm btn-success">Add</button>
						<button @onclick="ClosePopup" class="btn btn-sm btn-light">Close</button>
					</div>
				</div>
			</div>
		</div>
	}
</EditForm>
@code {
	[Parameter]
	public SurveyItem SelectedSurveyItem { get; set; }

	[Parameter]
	public EventHandler OnClose { get; set; }

	[Parameter]
	public bool PromptInline { get; set; }
	string strError = "";
	bool ShowPopup = false;
	bool boolRequired = false;

	IEnumerable<string> FormTypes = new string[]
	{ "Text Box", "Text Area", "Date", "Date Time", "Dropdown", "Multi-Select Dropdown" };

	private string newOption;

	protected override void OnParametersSet()
	{
		boolRequired = (SelectedSurveyItem.Required == 1);
	}

	#region Popup
	/// <summary>
	/// Opens the popup.
	/// </summary>
	private void OpenPopup()
	{
		ShowPopup = true;
	}

	/// <summary>
	/// Closes the popup.
	/// </summary>
	private void ClosePopup()
	{
		ShowPopup = false;
	}

	private void CloseSurveyItem(bool closeDialog = true)
	{
		if (OnClose != null)
		{
			OnClose.Invoke(this, null);
		}
		if (closeDialog)
		{
			dialogService.Close();
		}
	}
	#endregion

	#region Options
	/// <summary>
	/// Adds a response option to the survey question being edited.
	/// </summary>
	private void AddOption()
	{
		if (!string.IsNullOrWhiteSpace(newOption))
		{
			SelectedSurveyItem.SurveyItemOptions
				.Add(new SurveyItemOption
				{
					OptionLabel = newOption
				});

			newOption = string.Empty;
		}
	}

	private void RemoveOption(SurveyItemOption paramSurveyItemOption)
	{
		// Remove the option from the collection
		SelectedSurveyItem.SurveyItemOptions.Remove(paramSurveyItemOption);
	}
	#endregion

	#region Update/Delete
	async Task UpdateSurveyItem()
	{
		try
		{
			if (boolRequired)
			{
				SelectedSurveyItem.Required = 1;
			}
			else
			{
				SelectedSurveyItem.Required = 0;
			}

			if (SelectedSurveyItem.Id == 0)
			{
				SelectedSurveyItem =
					await @Service.CreateSurveyItemAsync(SelectedSurveyItem);
			}
			else
			{
				SelectedSurveyItem =
					await @Service.UpdateSurveyItemAsync(SelectedSurveyItem);
			}

			dialogService.Close(SelectedSurveyItem);
			CloseSurveyItem(false);
		}
		catch (Exception ex)
		{
			strError = ex.GetBaseException().Message;
		}
	}
	async Task DeleteSurveyItem()
	{
		var result = await @Service.DeleteSurveyItemAsync(SelectedSurveyItem);

		// Set the Id to -1 so we know it is deleted
		SelectedSurveyItem.Id = -1;

		dialogService.Close(SelectedSurveyItem);
		dialogService.Close(SelectedSurveyItem);
		CloseSurveyItem(false);
	}

	async Task DeleteSurveyItemDialog()
	{
		if (PromptInline)
		{
			await DeleteSurveyItem();
		}
		else
		{
			await dialogService.OpenAsync("Delete Question", ds =>
	@<RadzenCard Style="padding: 20px;">
		<p Style="margin-bottom: 10px;">Confirm?</p>
		<div class="row">
			<div class="col-md-12">
				<button class="btn btn-primary mb-1" @onclick="DeleteSurveyItem">Yes</button>
				<button class="btn btn-secondary mb-1" @onclick="() => ds.Close(false)">No</button>
			</div>
		</div>
	</RadzenCard>);
}

}
#endregion
}